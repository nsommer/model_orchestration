var search_data = {"index":{"searchIndex":["modelorchestration","base","classmethods","dependencycycleerror","persistence","classmethods","[]()","[]=()","create()","create!()","initialize_nested_model()","invalid?()","method_missing()","nested_model()","nested_model_dependency()","nested_models()","new()","raise_validation_error()","save()","save!()","valid?()","validate()","validate!()","readme"],"longSearchIndex":["modelorchestration","modelorchestration::base","modelorchestration::base::classmethods","modelorchestration::dependencycycleerror","modelorchestration::persistence","modelorchestration::persistence::classmethods","modelorchestration::base#[]()","modelorchestration::base#[]=()","modelorchestration::persistence::classmethods#create()","modelorchestration::persistence::classmethods#create!()","modelorchestration::base#initialize_nested_model()","modelorchestration::base#invalid?()","modelorchestration::base#method_missing()","modelorchestration::base::classmethods#nested_model()","modelorchestration::base::classmethods#nested_model_dependency()","modelorchestration::base::classmethods#nested_models()","modelorchestration::base::new()","modelorchestration::base#raise_validation_error()","modelorchestration::persistence#save()","modelorchestration::persistence#save!()","modelorchestration::base#valid?()","modelorchestration::base#validate()","modelorchestration::base#validate!()",""],"info":[["ModelOrchestration","","ModelOrchestration.html","","<p><code>ModelOrchestration</code> is a toolkit to help with orchestrating\nhandling of multiple models that are related …\n"],["ModelOrchestration::Base","","ModelOrchestration/Base.html","","<p>The module containing the base functionality. This includes class methods\nto specify nested models and …\n"],["ModelOrchestration::Base::ClassMethods","","ModelOrchestration/Base/ClassMethods.html","",""],["ModelOrchestration::DependencyCycleError","","ModelOrchestration/DependencyCycleError.html","",""],["ModelOrchestration::Persistence","","ModelOrchestration/Persistence.html","","<p>Including this module will give an OrchestrationModel::Base\nActiveRecord-like methods for perstistence. …\n"],["ModelOrchestration::Persistence::ClassMethods","","ModelOrchestration/Persistence/ClassMethods.html","",""],["[]","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-5B-5D","(key)","<p>Get a nested model by name (symbol).\n\n<pre>class Signup\n  include ModelOrchestration::Base\n\n  nested_model :company ...</pre>\n"],["[]=","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-5B-5D-3D","(key, value)","<p>Set a nested model by name (symbol).\n\n<pre>class Signup\n  include ModelOrchestration::Base\n\n  nested_model :company ...</pre>\n"],["create","ModelOrchestration::Persistence::ClassMethods","ModelOrchestration/Persistence/ClassMethods.html#method-i-create","(attrs = {}, &block)","<p>See:\napi.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create\n"],["create!","ModelOrchestration::Persistence::ClassMethods","ModelOrchestration/Persistence/ClassMethods.html#method-i-create-21","(attrs = {}, &block)","<p>api.rubyonrails.org/classes/ActiveRecord/Persistence/ClassMethods.html#method-i-create-21\n"],["initialize_nested_model","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-initialize_nested_model","(model_class, hash_or_instance = {})",""],["invalid?","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-invalid-3F","(context = nil)","<p>See:\napi.rubyonrails.org/classes/ActiveModel/Validations.html#method-i-invalid-3F\n"],["method_missing","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-method_missing","(message, *args, &block)","<p>Implements attribute accessor methods for nested models.\n"],["nested_model","ModelOrchestration::Base::ClassMethods","ModelOrchestration/Base/ClassMethods.html#method-i-nested_model","(model)","<p>Class method to declare a nested model. This invokes instantiation of the\nmodel when the orchestration …\n"],["nested_model_dependency","ModelOrchestration::Base::ClassMethods","ModelOrchestration/Base/ClassMethods.html#method-i-nested_model_dependency","(args = {})","<p>Class method to declare a dependency from one nested model to another.\n\n<pre>class Signup\n  include ModelOrchestration::Base ...</pre>\n"],["nested_models","ModelOrchestration::Base::ClassMethods","ModelOrchestration/Base/ClassMethods.html#method-i-nested_models","(*models)","<p>Class method to declare nested models. This invokes instantiation of the\nmodels when the orchestration …\n"],["new","ModelOrchestration::Base","ModelOrchestration/Base.html#method-c-new","(attrs = {})","<p>Instantiate the model and all nested models. Attributes can be submitted as\na hash and will be handed …\n"],["raise_validation_error","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-raise_validation_error","()",""],["save","ModelOrchestration::Persistence","ModelOrchestration/Persistence.html#method-i-save","(*args)","<p>See:\napi.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-save\n"],["save!","ModelOrchestration::Persistence","ModelOrchestration/Persistence.html#method-i-save-21","(*args)","<p>See:\napi.rubyonrails.org/classes/ActiveRecord/Persistence.html#method-i-save-21\n"],["valid?","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-valid-3F","(context = nil)","<p>See:\napi.rubyonrails.org/classes/ActiveModel/Validations.html#method-i-valid-3F\n"],["validate","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-validate","(context = nil)","<p>See:\napi.rubyonrails.org/classes/ActiveModel/Validations.html#method-i-validate\n"],["validate!","ModelOrchestration::Base","ModelOrchestration/Base.html#method-i-validate-21","(context = nil)","<p>See:\napi.rubyonrails.org/classes/ActiveModel/Validations.html#method-i-validate-21\n"],["README","","README_md.html","","<p>Model Orchestration - orchestrating actions on related models <img src=\"https://travis-ci.org/nsommer/model_orchestration.svg?branch=master\"> …\n"]]}}